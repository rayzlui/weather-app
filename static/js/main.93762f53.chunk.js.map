{"version":3,"sources":["actions/actionsTypes.js","APIKEYS.js","actions/actions.js","views/inputView.js","containers/searchContainer.js","views/searchView.js","containers/giphyContainer.js","views/giphyView.js","containers/weatherContainer.js","views/weatherView.js","containers/rootContainer.js","views/rootView.js","reducers/weatherReducer.js","reducers/giphyReducer.js","reducers/rootReducer.js","App.js","configureStore.js","serviceWorker.js","index.js"],"names":["FETCH_WEATHER_START","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_ERROR","FETCH_GIPHY_START","FETCH_GIPHY_SUCCESS","FETCH_GIPHY_ERROR","weatherKey","giphyKey","fetchWeatherError","error","type","actions","fetchGiphyError","fetchWeatherStart","url","fetchGiphyStart","fetchGiphy","weather","dispatch","request","response","status","statusText","_url2","regenerator_default","a","async","_context2","prev","next","concat","awrap","fetch","sent","json","data","stop","InputView","props","searchWeather","react_default","createElement","className","onKeyDown","event","keyCode","target","value","SearchContainer","connect","state","weatherData","location","_url","_context","main","fetchWeather","isFetching","header","message","display","Fragment","GiphyContainer","giphyData","_useState","useState","_useState2","Object","slicedToArray","gifNumber","changeGif","src","images","original","onClick","Math","floor","random","length","alt","WeatherContainer","weatherDescription","wind","name","visibility","accessWeather","description","toLowerCase","split","includes","toUpperCase","temp","temp_min","temp_max","speed","deg","humidity","RootContainer","intro","initialState","rootReducer","combineReducers","arguments","undefined","action","assign","store","middlewares","thunk","createStore","applyMiddleware","apply","configureStore","App","es","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAAaA,EAAsB,sBACtBC,EAAwB,wBACxBC,EAAsB,sBACtBC,EAAoB,oBACpBC,EAAsB,sBACtBC,EAAoB,oBCL3BC,EAAa,mCACbC,EAAW,mCCEV,SAASC,EAAkBC,GAChC,MAAO,CAAEC,KAAMC,EAA6BF,MAAOA,GAG9C,SAASG,EAAgBH,GAC9B,MAAO,CAAEC,KAAMC,EAA2BF,MAAOA,GAG5C,SAASI,EAAkBC,GAChC,MAAO,CAAEJ,KAAMC,EAA6BG,IAAKA,GAwB5C,SAASC,EAAgBD,GAC9B,MAAO,CAAEJ,KAAMC,EAA2BG,IAAKA,GAO1C,SAASE,EAAWC,GACzB,OAAO,SAA6BC,GAA7B,IAAAJ,EAAAK,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACCf,EADD,0CAAAgB,OACiDb,EADjD,aAAAa,OACoEvB,EADpE,aAELW,EAASH,EAAgBD,IAFpBa,EAAAE,KAAA,EAAAL,EAAAC,EAAAM,MAGeC,MAAMlB,IAHrB,UAIkB,OADnBK,EAHCQ,EAAAM,MAIOZ,OAJP,CAAAM,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAAAL,EAAAC,EAAAM,MAKkBZ,EAAQe,QAL1B,OAKCd,EALDO,EAAAM,KAMHf,EAVG,CAAER,KAAMC,EAA6BwB,KAUbf,IANxBO,EAAAE,KAAA,iBAQKR,EAA4BF,EAA5BE,OAAQC,EAAoBH,EAApBG,WAAYR,EAAQK,EAARL,IAE5BI,EAASN,EADK,CAAES,SAAQC,aAAYR,SATjC,yBAAAa,EAAAS,WC1CF,SAASC,EAAUC,GAAO,IACvBC,EAAkBD,EAAlBC,cAER,OACEC,EAAAf,EAAAgB,cAAA,SACEC,UAAU,gBACVhC,KAAK,SACLiC,UAAW,SAAAC,GALG,KAMRA,EAAMC,UACRN,EAAcK,EAAME,OAAOC,OAC3BH,EAAME,OAAOC,MAAQ,SCGxB,IAAMC,EAAkBC,YAZ/B,SAAyBC,GACvB,MAAO,CACLC,YAAaD,EAAMC,cAIvB,SAA4BjC,GAC1B,MAAO,CACLqB,cAAe,SAAAa,GAAQ,OAAIlC,EFOxB,SAAsBkC,GAC3B,OAAO,SAA+BlC,GAA/B,IAAAJ,EAAAK,EAAAC,EAAAC,EAAAC,EAAA+B,EAAA,OAAA7B,EAAAC,EAAAC,MAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,cACCf,EADD,qDAAAgB,OAC4DsB,EAD5D,YAAAtB,OAC+ExB,EAD/E,mBAELY,EAASL,EAAkBC,IAFtBwC,EAAAzB,KAAA,EAAAL,EAAAC,EAAAM,MAGiBC,MAAMlB,IAHvB,UAIkB,OADjBK,EAHDmC,EAAArB,MAIOZ,OAJP,CAAAiC,EAAAzB,KAAA,gBAAAyB,EAAAzB,KAAA,EAAAL,EAAAC,EAAAM,MAKkBZ,EAAQe,QAL1B,OAKCd,EALDkC,EAAArB,KAMHf,EAVG,CAAER,KAAMC,EAA+BwB,KAUbf,IAC7BF,EAASF,EAAWI,EAASH,QAAQ,GAAGsC,OAPrCD,EAAAzB,KAAA,iBASKR,EAA4BF,EAA5BE,OAAQC,EAAoBH,EAApBG,WAAYR,EAAQK,EAARL,IAE5BI,EAASV,EADK,CAAEa,SAAQC,aAAYR,SAVjC,yBAAAwC,EAAAlB,WER+BoB,CAAaJ,OAItBH,CCZxB,SAAoBX,GAAO,IACxBC,EAA+BD,EAA/BC,cAAeY,EAAgBb,EAAhBa,YACfhB,EAA4BgB,EAA5BhB,KAAM1B,EAAsB0C,EAAtB1C,MAAOgD,EAAeN,EAAfM,WAEjBf,EAAY,YACZgB,EAAS,2BACTC,EAAU,KAETxB,IACHO,EAAY,mBACZgB,EAAS,wBACTC,EAAUnB,EAAAf,EAAAgB,cAAA,KAAGC,UAAU,eAAb,qBAGRjC,IACFkD,EACEnB,EAAAf,EAAAgB,cAAA,KAAGC,UAAU,iBAAb,mIAOJ,IAAIkB,EACFpB,EAAAf,EAAAgB,cAAAD,EAAAf,EAAAoC,SAAA,KACErB,EAAAf,EAAAgB,cAAA,MAAIC,UAAU,kBAAkBgB,GAC/BC,EACDnB,EAAAf,EAAAgB,cAACJ,EAAD,CAAWE,cAAeA,KAQ9B,OAJIkB,IACFG,EAAUpB,EAAAf,EAAAgB,cAAA,MAAIC,UAAU,oBAAd,sBAGLF,EAAAf,EAAAgB,cAAA,OAAKC,UAAWA,GAAYkB,aC9B9B,IAAME,EAAiBb,YAN9B,SAAyBC,GACvB,MAAO,CACLa,UAAWb,EAAMa,UAAU5B,OAIwB,KAAzBc,CCNvB,SAAmBX,GAAO,IAAA0B,EACAC,mBAAS,GADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACxBK,EADwBH,EAAA,GACbI,EADaJ,EAAA,GAEvBH,EAAczB,EAAdyB,UACR,IAAKA,EAAW,OAAO,KAHQ,IAIvB5B,EAAS4B,EAAT5B,KAER,OACEK,EAAAf,EAAAgB,cAAA,OACEC,UAAU,QACV6B,IAAKpC,EAAKkC,GAAWG,OAAOC,SAAS3D,IACrC4D,QAAS,kBAAMJ,EAAUK,KAAKC,MAAMD,KAAKE,SAAW1C,EAAK2C,UACzDC,IAAI,kBCLH,IAAMC,EAAmB/B,YANhC,SAAyBC,GACvB,MAAO,CACLC,YAAaD,EAAMC,YAAYhB,OAIsB,KAAzBc,CCNzB,SAAqBX,GAAO,IACzBa,EAAgBb,EAAhBa,YACR,IAAKA,EAAa,OAAO,KAFQ,IAK7B8B,EAFIhE,EAA0CkC,EAA1ClC,QAASsC,EAAiCJ,EAAjCI,KAAM2B,EAA2B/B,EAA3B+B,KAAMC,EAAqBhC,EAArBgC,KAAMC,EAAejC,EAAfiC,WAC7BC,EAAgBpE,EAAQ,GAY9B,OAJEgE,EALAI,EAAcC,YACXC,cACAC,MAAM,KACNC,SAAS,QAEM,8BAAA3D,OAAiCqD,EAAKO,eAEtC,mBAAA5D,OAAsBuD,EAAcC,YAAYI,cAAhD,QAAA5D,OAAoEqD,EAAKO,eAG3FlD,EAAAf,EAAAgB,cAAA,OAAKC,UAAU,qBACbF,EAAAf,EAAAgB,cAAA,MAAIC,UAAU,mBAAmBuC,GACjCzC,EAAAf,EAAAgB,cAAA,WAASC,UAAU,iBACjBF,EAAAf,EAAAgB,cAAA,kCAA0Bc,EAAKoC,KAA/B,OACAnD,EAAAf,EAAAgB,cAAA,iBACQc,EAAKqC,SADb,aACiCrC,EAAKsC,WAGxCrD,EAAAf,EAAAgB,cAAA,WAASC,UAAU,iBACjBF,EAAAf,EAAAgB,cAAA,kBACAD,EAAAf,EAAAgB,cAAA,SACGyC,EAAKY,MADR,UACsBZ,EAAKa,MAG7BvD,EAAAf,EAAAgB,cAAA,WAASC,UAAU,qBACjBF,EAAAf,EAAAgB,cAAA,sBACAD,EAAAf,EAAAgB,cAAA,SAAIc,EAAKyC,WAEXxD,EAAAf,EAAAgB,cAAA,WAASC,UAAU,uBACjBF,EAAAf,EAAAgB,cAAA,wBACAD,EAAAf,EAAAgB,cAAA,SAAI2C,OC/BL,IAAMa,EAAgBhD,YAN7B,SAAyBC,GACvB,MAAO,CACLgD,MAAkC,OAA3BhD,EAAMC,YAAYhB,OAIyB,KAAzBc,CCFtB,SAAkBX,GAAO,IAE1BI,EAAY,YAIhB,OALkBJ,EAAV4D,QAGNxD,EAAY,8BAGZF,EAAAf,EAAAgB,cAAA,OAAKC,UAAWA,GACdF,EAAAf,EAAAgB,cAACO,EAAD,MACAR,EAAAf,EAAAgB,cAACqB,EAAD,MACAtB,EAAAf,EAAAgB,cAACuC,EAAD,gCCXOmB,EAAe,CAC1BhE,KAAM,KACNsB,YAAY,EACZhD,MAAO,MCDF,IAAM0F,EAAe,CAC1B1C,YAAY,EACZtB,KAAM,KACN1B,MAAO,MCPF,IAAM2F,EAAcC,YAAgB,CACzClD,YFOK,WAAsD,IAA9BD,EAA8BoD,UAAAxB,OAAA,QAAAyB,IAAAD,UAAA,GAAAA,UAAA,GAAtBH,EAAcK,EAAQF,UAAAxB,OAAA,EAAAwB,UAAA,QAAAC,EAE3D,OADiBC,EAAT9F,MAEN,KAAKV,EACH,OAAOmE,OAAOsC,OAAO,GAAIvD,EAAO,CAC9BO,YAAY,EACZhD,MAAO,KACP0B,KAAM,OAEV,KAAKlC,EACH,OAAOkE,OAAOsC,OAAO,GAAIvD,EAAO,CAC9BO,YAAY,EACZtB,KAAMqE,EAAOrE,KACb1B,MAAO,OAEX,KAAKP,EACH,OAAOiE,OAAOsC,OAAO,GAAIvD,EAAO,CAC9BO,YAAY,EACZtB,KAAM,KACN1B,MAAO+F,EAAO/F,QAElB,QACE,OAAOyC,IE5BXa,UDQK,WAAoD,IAA9Bb,EAA8BoD,UAAAxB,OAAA,QAAAyB,IAAAD,UAAA,GAAAA,UAAA,GAAtBH,EAAcK,EAAQF,UAAAxB,OAAA,EAAAwB,UAAA,QAAAC,EAEzD,OADiBC,EAAT9F,MAEN,KAAKP,EAML,KAAKH,EACH,OAAOmE,OAAOsC,OAAO,GAAIvD,EAAO,CAC9BO,YAAY,EACZtB,KAAM,KACN1B,MAAO,OAEX,KAAKL,EACH,OAAO+D,OAAOsC,OAAO,GAAIvD,EAAO,CAC9BO,YAAY,EACZtB,KAAMqE,EAAOrE,KACb1B,MAAO,OAEX,KAAKJ,EACH,OAAO8D,OAAOsC,OAAO,GAAIvD,EAAO,CAC9BO,YAAY,EACZtB,KAAM,KACN1B,MAAO+F,EAAO/F,QAElB,KAAKP,EACH,OAAOiE,OAAOsC,OAAO,GAAIvD,EAAO,CAC9BO,YAAY,EACZtB,KAAM,KACN1B,MAAO,OAEX,QACE,OAAOyC,ME1Cb,IAAMwD,ECDC,WACL,IAAMC,EAAc,CAACC,KAOrB,OADcC,YAAYT,EAAaU,IAAeC,WAAf,EAAmBJ,IDN9CK,GASCC,MARf,WACE,OACEzE,EAAAf,EAAAgB,cAACyE,EAAA,EAAD,CAAUR,MAAOA,GACflE,EAAAf,EAAAgB,cAACwD,EAAD,QEEckB,QACW,cAA7BC,OAAOhE,SAASiE,UAEe,UAA7BD,OAAOhE,SAASiE,UAEhBD,OAAOhE,SAASiE,SAASC,MACvB,2DCZNC,IAASC,OAAOhF,EAAAf,EAAAgB,cAACgF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.93762f53.chunk.js","sourcesContent":["export const FETCH_WEATHER_START = 'FETCH_WEATHER_START';\nexport const FETCH_WEATHER_SUCCESS = 'FETCH_WEATHER_SUCCESS';\nexport const FETCH_WEATHER_ERROR = 'FETCH_WEATHER_ERROR';\nexport const FETCH_GIPHY_START = 'FETCH_GIPHY_START';\nexport const FETCH_GIPHY_SUCCESS = 'FETCH_GIPHY_SUCCESS';\nexport const FETCH_GIPHY_ERROR = 'FETCH_GIPHY_ERROR';\n","const weatherKey = '9f386793ccdc40ff247bdb15e0f6be2f';\nconst giphyKey = 'G8vI11CwtZISoHG6o1qNQwMVhcSz4U1i';\n\nexport { weatherKey, giphyKey };\n\n//api call for map https://tile.openweathermap.org/map/{layer}/{z}/{x}/{y}.png?appid={api_key}\n//api call for forecast api.openweathermap.org/data/2.5/forecast?q=London,us&mode=json\n","import * as actions from './actionsTypes';\nimport { weatherKey, giphyKey } from '../APIKEYS.js';\n\nexport function fetchWeatherError(error) {\n  return { type: actions.FETCH_WEATHER_ERROR, error: error };\n}\n\nexport function fetchGiphyError(error) {\n  return { type: actions.FETCH_GIPHY_ERROR, error: error };\n}\n\nexport function fetchWeatherStart(url) {\n  return { type: actions.FETCH_WEATHER_START, url: url };\n}\n\nexport function fetchWeatherSuccess(data) {\n  return { type: actions.FETCH_WEATHER_SUCCESS, data: data };\n}\n\nexport function fetchWeather(location) {\n  return async function fetchingWeather(dispatch) {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&APIKEY=${weatherKey}&units=imperial`;\n    dispatch(fetchWeatherStart(url));\n    const request = await fetch(url);\n    if (request.status === 200) {\n      let response = await request.json();\n      dispatch(fetchWeatherSuccess(response));\n      dispatch(fetchGiphy(response.weather[0].main));\n    } else {\n      const { status, statusText, url } = request;\n      const error = { status, statusText, url };\n      dispatch(fetchWeatherError(error));\n    }\n  };\n}\n\nexport function fetchGiphyStart(url) {\n  return { type: actions.FETCH_GIPHY_START, url: url };\n}\n\nexport function fetchGiphySuccess(data) {\n  return { type: actions.FETCH_GIPHY_SUCCESS, data: data };\n}\n\nexport function fetchGiphy(weather) {\n  return async function fetchingGiphy(dispatch) {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${weather}&api_key=${giphyKey}&limit=25`;\n    dispatch(fetchGiphyStart(url));\n    let request = await fetch(url);\n    if (request.status === 200) {\n      let response = await request.json();\n      dispatch(fetchGiphySuccess(response));\n    } else {\n      const { status, statusText, url } = request;\n      const error = { status, statusText, url };\n      dispatch(fetchGiphyError(error));\n    }\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function InputView(props) {\n  const { searchWeather } = props;\n  const ENTER_KEY = 13;\n  return (\n    <input\n      className=\"search__input\"\n      type=\"search\"\n      onKeyDown={event => {\n        if (event.keyCode === ENTER_KEY) {\n          searchWeather(event.target.value);\n          event.target.value = null;\n        }\n      }}\n    />\n  );\n}\n\nInputView.propTypes = {\n  searchWeather: PropTypes.func,\n};\n","import { connect } from 'react-redux';\nimport { fetchWeather } from '../actions/actions';\nimport { SearchView } from '../views/searchView';\n\nfunction mapStateToProps(state) {\n  return {\n    weatherData: state.weatherData,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    searchWeather: location => dispatch(fetchWeather(location)),\n  };\n}\n\nexport const SearchContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { InputView } from './inputView';\n\nexport function SearchView(props) {\n  const { searchWeather, weatherData } = props;\n  const { data, error, isFetching } = weatherData;\n\n  let className = 'searchbar';\n  let header = 'IS IT FUCKING RAINING AT';\n  let message = null;\n\n  if (!data) {\n    className = 'searchbar--intro';\n    header = 'IS IT FUCKING RAINING';\n    message = <p className=\"fun-message\">hey where u from</p>;\n  }\n\n  if (error) {\n    message = (\n      <p className=\"error-message\">\n        Dear Kind Person. We are unable to find the city, please try again. Or\n        please use a zip code if you have tried multiple times.\n      </p>\n    );\n  }\n\n  let display = (\n    <>\n      <h1 className=\"search__header\">{header}</h1>\n      {message}\n      <InputView searchWeather={searchWeather} />\n    </>\n  );\n\n  if (isFetching) {\n    display = <h1 className=\"fetching-message\">FUCKING SEARCHING</h1>;\n  }\n\n  return <div className={className}>{display}</div>;\n}\n\nSearchView.propTypes = {\n  searchWeather: PropTypes.func,\n  weatherData: PropTypes.object,\n};\n","import { connect } from 'react-redux';\nimport { GiphyView } from '../views/giphyView';\n\nfunction mapStateToProps(state) {\n  return {\n    giphyData: state.giphyData.data,\n  };\n}\n\nexport const GiphyContainer = connect(mapStateToProps, null)(GiphyView);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport function GiphyView(props) {\n  const [gifNumber, changeGif] = useState(0);\n  const { giphyData } = props;\n  if (!giphyData) return null;\n  const { data } = giphyData;\n\n  return (\n    <img\n      className=\"image\"\n      src={data[gifNumber].images.original.url}\n      onClick={() => changeGif(Math.floor(Math.random() * data.length))}\n      alt=\"weather-gif\"\n    ></img>\n  );\n}\n\nGiphyView.propTypes = {\n  giphyData: PropTypes.object,\n  weather: PropTypes.string,\n};\n","import { WeatherView } from '../views/weatherView';\nimport { connect } from 'react-redux';\n\nfunction mapStateToProps(state) {\n  return {\n    weatherData: state.weatherData.data,\n  };\n}\n\nexport const WeatherContainer = connect(mapStateToProps, null)(WeatherView);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport function WeatherView(props) {\n  const { weatherData } = props;\n  if (!weatherData) return null;\n  const { weather, main, wind, name, visibility } = weatherData;\n  const accessWeather = weather[0];\n  let weatherDescription;\n  if (\n    accessWeather.description\n      .toLowerCase()\n      .split(' ')\n      .includes('rain')\n  ) {\n    weatherDescription = `YES ITS FUCKING RAINING IN ${name.toUpperCase()}`;\n  } else {\n    weatherDescription = `IT IS CURRENTLY ${accessWeather.description.toUpperCase()} IN ${name.toUpperCase()}`;\n  }\n  return (\n    <div className=\"weather-container\">\n      <h2 className=\"weather__header\">{weatherDescription}</h2>\n      <section className=\"weather__temp\">\n        <h3>Current Temperature: {main.temp} F*</h3>\n        <p>\n          Low: {main.temp_min} to High: {main.temp_max}\n        </p>\n      </section>\n      <section className=\"weather__wind\">\n        <h3>Wind</h3>\n        <p>\n          {wind.speed}mph to {wind.deg}\n        </p>\n      </section>\n      <section className=\"weather__humidity\">\n        <h3>Humidity</h3>\n        <p>{main.humidity}</p>\n      </section>\n      <section className=\"weather__visibility\">\n        <h3>Visibility</h3>\n        <p>{visibility}</p>\n      </section>\n    </div>\n  );\n}\n\nWeatherView.propTypes = {\n  weatherData: PropTypes.object,\n  searchWeather: PropTypes.func,\n};\n","import { connect } from 'react-redux';\nimport { RootView } from '../views/rootView';\n\nfunction mapStateToProps(state) {\n  return {\n    intro: state.weatherData.data === null,\n  };\n}\n\nexport const RootContainer = connect(mapStateToProps, null)(RootView);\n","import { SearchContainer } from '../containers/searchContainer';\nimport { GiphyContainer } from '../containers/giphyContainer';\nimport React from 'react';\n\nimport { WeatherContainer } from '../containers/weatherContainer';\nimport PropTypes from 'prop-types';\n\nexport function RootView(props) {\n  const { intro } = props;\n  let className = 'container';\n  if (intro) {\n    className = 'container container--intro';\n  }\n  return (\n    <div className={className}>\n      <SearchContainer />\n      <GiphyContainer />\n      <WeatherContainer />\n    </div>\n  );\n}\n\nRootView.propTypes = {\n  intro: PropTypes.bool,\n};\n","import {\n  FETCH_WEATHER_START,\n  FETCH_WEATHER_SUCCESS,\n  FETCH_WEATHER_ERROR,\n} from '../actions/actionsTypes';\n\nexport const initialState = {\n  data: null,\n  isFetching: false,\n  error: null,\n};\n\nexport function weatherReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case FETCH_WEATHER_START:\n      return Object.assign({}, state, {\n        isFetching: true,\n        error: null,\n        data: null,\n      });\n    case FETCH_WEATHER_SUCCESS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: action.data,\n        error: null,\n      });\n    case FETCH_WEATHER_ERROR:\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: null,\n        error: action.error,\n      });\n    default:\n      return state;\n  }\n}\n","import {\n  FETCH_GIPHY_START,\n  FETCH_GIPHY_SUCCESS,\n  FETCH_GIPHY_ERROR,\n  FETCH_WEATHER_START,\n  FETCH_WEATHER_ERROR,\n} from '../actions/actionsTypes';\n\nexport const initialState = {\n  isFetching: false,\n  data: null,\n  error: null,\n};\n\nexport function giphyReducer(state = initialState, action) {\n  const { type } = action;\n  switch (type) {\n    case FETCH_GIPHY_START:\n      return Object.assign({}, state, {\n        isFetching: true,\n        data: null,\n        error: null,\n      });\n    case FETCH_WEATHER_START:\n      return Object.assign({}, state, {\n        isFetching: true,\n        data: null,\n        error: null,\n      });\n    case FETCH_GIPHY_SUCCESS:\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: action.data,\n        error: null,\n      });\n    case FETCH_GIPHY_ERROR:\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: null,\n        error: action.error,\n      });\n    case FETCH_WEATHER_ERROR:\n      return Object.assign({}, state, {\n        isFetching: false,\n        data: null,\n        error: null,\n      });\n    default:\n      return state;\n  }\n}\n","import { weatherReducer } from './weatherReducer';\nimport { giphyReducer } from './giphyReducer';\nimport { combineReducers } from 'redux';\n\nexport const rootReducer = combineReducers({\n  weatherData: weatherReducer,\n  giphyData: giphyReducer,\n});\n","import React from 'react';\nimport './App.scss';\nimport { Provider } from 'react-redux';\nimport { RootContainer } from './containers/rootContainer';\nimport { configureStore } from './configureStore';\n\nconst store = configureStore();\nfunction App() {\n  return (\n    <Provider store={store}>\n      <RootContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","import thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { createStore, applyMiddleware } from 'redux';\nimport { rootReducer } from './reducers/rootReducer';\n\nexport function configureStore() {\n  const middlewares = [thunk];\n\n  if (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n  }\n\n  const store = createStore(rootReducer, applyMiddleware(...middlewares));\n  return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}